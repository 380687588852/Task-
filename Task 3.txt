import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets  
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import  DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import classification_report
from sklearn import preprocessing

# import some data to play with
iris = pd.read_csv('C:\\Users\\admin\\Downloads\\Iris (1).csv')
iris

iris.head()
iris['Species'].value_counts()

#Complete Iris dataset
label_encoder = preprocessing.LabelEncoder()
iris['species']= label_encoder.fit_transform(iris['Species']) 
iris['Species'].value_counts()
iris.iloc[:,0:4]
x=iris.iloc[:,0:4]
y=iris['species']
x
y
iris.columns
colnames = list(iris.columns)
colnames


# Splitting data into training and testing data set
x_train, x_test,y_train,y_test = train_test_split(x,y, test_size=0.2,random_state=40)
x_train
y_train

Building Decision Tree Classifier using Entropy Criteria
model = DecisionTreeClassifier(criterion = 'entropy',max_depth=3)
model.fit(x_train,y_train)


#PLot the decision tree
tree.plot_tree(model);
y_train.value_counts()

fn=['sepal length (cm)','sepal width (cm)','petal length (cm)','petal width (cm)']
cn=['setosa', 'versicolor', 'virginica']
fig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=300)
tree.plot_tree(model,
               feature_names = fn, 
               class_names=cn,
               filled = True);

#Predicting on test data
preds = model.predict(x_test) # predicting on test data set 
pd.Series(preds).value_counts()
y_test
preds
pd.crosstab(y_test,preds)


# Accuracy 
np.mean(preds==y_test)

